Verify these two:

documentation:  Author info.  If I don't want Company / Website info, then I shouldn't get the dummy copy.

When you ask for sub new to be inserted, it fails to not-insert Exporter info.

-----
Long-range plan:
1.  Upload as v0.33 what I sent to Avery as v0.32_07.
2.  Then, try to upgrade the test coverage -- in effect, "phalanx" it,
particularly the modulemaker utility.
3.  Finally, add features suggested by other modules (e.g.,
Module::Starter) which have themselves been influenced by EU::MM.

-----
Short-range plan:

* Test death_message().  ANALYSIS:  Having moved all error-checking to
* the constructor, all the conditions which previously would have
* generated a death message may now be precluded.  NEEDS FURTHER
* ANALYSIS.

* Refactor BEGIN blocks in lib/ExtUtils/Modulemaker/Licenses/*.pm.

* Analyze whether SecondStyle.pm is still needed.  Geoff used it to
* demonstrate subclassability -- but my version is now pure-OO and I
* don't want internals subclassed.

* For backward compatibility, replace use warnings with 'local $^W = 1;'.  Also
* eliminate lexically scoped filehandles $fh. (I didn't actually have
* any, but t/03..04 had a filehandle FILE which I lexically scoped:
* 'local *FH;')  DONE

* modulemaker utility is failing to put author's name in appropriate spot
* in Makefile.PL (e-mail is OK).  Similarly, AUTHOR info in lib//*.pm
* file is not getting author's name, organization, or website (e-mail is
* OK; version number is OK; CPAN ID not yet determined).  These *are*
* being correctly picked up if a pure hash is passed to the constructor,
* so the problem must be in the utility.

* further inspection fails to confirm this problem.  When I call 'perl
* -Mblib scripts/modulemaker" and go interactive, the Makefile.PL comes
* out okay, as does the AUTHOR section in lib//*.pm. It may have been the
* case that I was picking up the system version of the distro (v0.33)
* rather than the working version.

* but when I try to submit the author name from the command-line, I
* fail!  This should be corrected at once!

* I'm pretty certain that I've fixed the problem described above.  To be
* sure, I need to write a testing subroutine to test the content of
* lib/*/.pm along the lines of check_Makefile.PL.  So that's next up.

* In order to correct one of the bugs listed on rt.cpan.org, I have to
* figure out how to account for apostrophes in the values passed to the
* constructor ... particularly those data that appear in Makefile.PL.
* Any apostrophe that appears in a module name, abstract, author name or
* author e-mail must be escaped inside Makefile.PL.

* To simplify matters, I am going to remove coverage for Perl 4 style
* module names (D'oh).

* Bug:  When VERBOSE => 1 but COMPACT => 0, I'm not getting a printout
* of mkdirs -- only of writing files.  FIXED:  It was a problem in the
* test, not in the module.  I was accidentally reusing the same tempdir,
* which meant that one directory was not newly created.

* Suggestions from David's session:  Make %keys_permitted replaceable
* from outside the module.
* check_dir():  final statement is currently unreachable.

* For future extensibility:  EXTRA_MODULES is not easily subclassable
* the way print_file works.

* David's philosophy: EU::MM should be able to accommodate programmers
* at different points on their learning curves.  As it does now, it
* should provide the 'no-brainer' option as default.  But this could be
* done by having EU::MM create a config file from the defaults.  Then, as a user becomes
* accustomed to it, s/he doesn't want to constantly repeat typing in the
* interactive mode, so the user can change the config file such that
* *that* provides a new set of prompts in the interactive mode.
(Cf. the way that many Unix utilities create a config file on first
use.)

* Higher stage:  ?? run the utility in non-interactive mode, but using
* defaults provided by the config.  modulemaker is halfway there

* Advantage of a config file:  Somehow who has to create modules more
* than once will not want to re-type at the prompts.  They will want
* simply to edit a config file as needed.

* Cf.  Config::Find.  In OS-specific way, it determines where to put
* configuration files.

--
15 July 2005

1.  I noted first of all that certain lines (361-366) in death_message() were
never being reached by the test suite.  It turns out that they can only
be tested when you are in interactive mode -- which I have yet to test
in the test suite (only visually).
2.  I further noted that by moving verify_values() to the constructor, I
appeared to have caused a situation in which arguments entered via the
interactive mode were not subject to even the minimal checking provided
by verify_values.  That's because in the interactive mode, this is the
sequence of events:
a.  command-line options stored in %opts
b.  constructor called; internally, it first stores the default values;
then it pulls in the values passed in the list in modulemaker, i.e.,
values determined by %opts; these values *replace* some or all of tthe
defaults inside the object; these resulting values are then validated by
verify_values and the ref to the object is returned.
c.  if $opts{i} is now set, interactive mode begins; the values entered
by the user at the prompts are *not* subject to further validation --
which means bad values can be entered
d.  if I tried to validate those values -- say, by calling
$MOD->verify_values after the 'while' loop in the interactive mode --
that would still not prevent bad values from being implemented, because
death_message() is *not* set up to croak at bad values when in
interactive mode!
e.  the fact that I could call $MOD->verify_values inside modulemaker
indicates that it's publicly accessible -- whether or not I document it;
do I really want it to be publicly accessible?  (David pondered the
possibility that it should be.)
f.  then, upon closer inspection, I saw that code calling verify_values
always was present inside modulemaker (lines 327-29), but it was never
called, because it depended on a prompt 'V' which was never incorporated
into the Main_Menu!

3.  I should change the 2 License modules from @EXPORT to @EXPORT_OK.
This will require explicitly importing those subs in Modulemaker.pm.
(There are also subroutines called interact() in each of the License
modules which are used in modulemaker by being called in the fully
qualified manner (lines 50-51).

4.  I'm uneasy with the fact that (presumably) every ModuleMaker
subroutine is a publicly accessible method ... presumably, since almost
of them start '$self = shift;'.  I think Geoff wanted it to be this way
because his conception of how EU::MM would be subclassed/extended was
that people would write new methods with the same names as EU::MM
methods and simply override them.  That explains his discussing these in
the POD and suggesting that they were candidates for subclassing.  But,
notably, he did *not* mention them in the SYNOPSIS.  I am of the
philosophy that *only* public methods should be presented in the
SYNOPSIS, but also that *all* publicly available methods should be
presented there as well.  I would rather restrict subclassing to passing
different data to the object or overriding the 2 public methods.  Geoff
would have permitted overriding methods which are called within those
public methods.

